version: "3.8"

services:
  db:
    image: postgres:14.3-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    restart: always
  broker:
    image: rabbitmq:3.10-alpine
    restart: always
  redis:
    image: redis:7-alpine
    restart: always
  station:
    build:
      context: ./station/
      dockerfile: ../docker/ruby/Dockerfile
    command: sh -c 'wait-for-it -q broker:5672 -- bundle exec exe/station'
    env_file:
      - ./.env
    depends_on:
      - broker
    restart: always
  decoder:
    build:
      context: ./decoder/
      dockerfile: ../docker/decoder/Dockerfile
    command: sh -c 'wait-for-it -q broker:5672 -- wait-for-it -q redis:6379 -- decoder'
    env_file:
      - ./.env
    depends_on:
      - broker
      - redis
    restart: always
  persister:
    build:
      context: ./backend/
      dockerfile: ../docker/dotnet/Dockerfile
      args:
        - PROJECT_NAME=Persister.App
    command: sh -c 'wait-for-it -q broker:5672 -- wait-for-it -q db:5432 -- dotnet Persister.App.dll'
    env_file:
      - ./.env
    depends_on:
      - broker
      - db
    restart: always
  transmitter:
    build:
      context: ./backend/
      dockerfile: ../docker/aspnet/Dockerfile
      args:
        - PROJECT_NAME=Transmitter.App
    command: sh -c 'wait-for-it -q broker:5672 -- dotnet Transmitter.App.dll'
    env_file:
      - ./.env
    depends_on:
      - broker
    restart: always
  webapi:
    build:
      context: ./backend/
      dockerfile: ../docker/aspnet/Dockerfile
      args:
        - PROJECT_NAME=WebApi.App
    command: sh -c 'wait-for-it -q db:5432 -- dotnet WebApi.App.dll'
    env_file:
      - ./.env
    depends_on:
      - db
    restart: always
  frontend:
    build:
      context: ./frontend/
      dockerfile: ../docker/frontend/Dockerfile
    volumes:
      - frontend_data:/usr/src/app/www/
  webserver:
    build: ./docker/nginx
    volumes:
      - frontend_data:/usr/src/app/www/
    ports:
      - 80:80
      - 443:443
    depends_on:
      - frontend
      - webapi
      - transmitter
    restart: always
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

volumes:
  postgres_data:
  frontend_data:
